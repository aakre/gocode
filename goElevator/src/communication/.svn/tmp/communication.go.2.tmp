package communication

import (
	"fmt"
	"time"
	"network"
	"elevator"
	"encoding/json"
	"systemstate"
)

//input channels: netChan, elevChan, stateChan, 

type Offer struct {
	IP string
	Cost int
}

func mailman(){
	for{
		newMail := <-netChan.Inbox
		fmt.Println("comm.mailman--> You've got mail!")
		go openMail(newMail)
	}
}

func openMail(mail network.Mail) {
	msg := mail.Msg
	start := 0
	for i:=0; i<len(msg); i++ {
		c := string(msg[i])
		if c == "}" {
			if i == len(msg)-1 {
				go sortMail(mail.IP, msg[start:i+1])
			} else if (i+4) < len(msg) && string(msg[i+4]) == "{" {
				fmt.Println("comm.openMail--> decoding MSG")
				go sortMail(mail.IP, msg[start:i+1])
				start = i+1
			}
		}
	}
}

func sortMail(ip string, msg []byte) {
	fmt.Println("comm.sortMail--> Attemping to decode")
	header := string(msg[0:3])
	switch header {
	case "CMD":
		decodeCMD(ip, msg[3:])
	case "INF":
		decodeINF(ip, msg[3:])
	case "CPL":
		decodeCPL(ip, msg[3:])
	case "NEW":
		decodeNEW(ip, msg[3:])
	case "OFR":
		decodeOFR(ip, msg[3:])
	case "HLP":
		decodeHLP(ip)
	case "UPD":
		decodeUPD(msg[3:])
	case "DTH":
		decodeDTH(msg[3:])
	default:
		fmt.Println("comm.sortMail--> Decoding failed...")
		// Error handling?
	}
}

//Decoding of messages
func decodeCMD(senderIP string, msgIn []byte) {
	var myNewOrder elevator.Order
	err := json.Unmarshal(msgIn, &myNewOrder)
	if err == nil {
		fmt.Println("comm.decode--> CMD decoded")
		commChan.extCommand<- myNewOrder
	}else{
		fmt.Println("comm.decode--> CMD Unmarshal error")
	}
}

func decodeINF(senderIP string, msgIn []byte) {
	var orderTaken elevator.Order
	err := json.Unmarshal(msgIn, &orderTaken)
	theirNewOrder := systemstate.StateOrder{Id: senderIP, Order: orderTaken}
	if err == nil {
		fmt.Println("comm.decode--> INF decoded")
		commChan.extInform<- theirNewOrder
	}else{
		fmt.Println("comm.decode--> INF Unmarshal error", err)
	}
}
		
func decodeCPL(senderIP string, msgIn []byte) {
	var orderComplete elevator.Order
	err := json.Unmarshal(msgIn, &orderComplete)
	theirCplOrder := systemstate.StateOrder{Id: senderIP, Order: orderComplete}
	if err == nil {
		fmt.Println("comm.decode--> CPL decoded")
		commChan.extComplete<- theirCplOrder
	}else{
		fmt.Println("comm.decode--> CPL Unmarshal error", err)
	}
}

func decodeNEW(senderIP string, msgIn []byte) {
	var newOrder elevator.Order
	err := json.Unmarshal(msgIn, &newOrder)
	if err == nil {
		fmt.Println("comm.decode--> NEW decoded")
		elevChan.GetCost <- newOrder
		myIP := network.GetMyIP()
		myCost := <-elevChan.SendCost
		myOffer := Offer{myIP, myCost}
		codeOFR(senderIP, myOffer)
	}else{
		fmt.Println("comm.decode--> NEW Unmarshal error", err)
	}
}

func decodeOFR(senderIP string, msgIn []byte) {
	var theirOffer Offer
	err := json.Unmarshal(msgIn, &theirOffer)
	if err == nil {
		fmt.Println("comm.decode--> OFR decoded")
		select{
		case commChan.NewOffer <- theirOffer:
		case <-time.After(100 * time.Millisecond):
			fmt.Println("comm.decode--> Offer timeout")
		}
	}else{
		fmt.Println("comm.decode--> OFR Unmarshal error")
	}
}

func decodeDTH(msgIn []byte) {
	var deadIP string
	err := json.Unmarshal(msgIn, &deadIP)
	if err == nil {
		fmt.Println("comm.decode--> DTH decoded")
		netChan.SendDeadElevator <- deadIP
	}else{
		fmt.Println("comm.decode--> DTH Unmarshal error")
	}
}
	
func decodeHLP(senderIP string) {
	stateChan.SendState <- true
	sysStateCpy := <- stateChan.SysState
	msgOut, err := json.Marshal(sysStateCpy)
	if err == nil {
		fmt.Println("comm.decode--> HLP decoded")
		codeUPD(senderIP, msgOut)
	}else{
		fmt.Println("comm.decode--> HLP Unmarshal error")
	}
}

func decodeUPD(msgIn []byte) {
	var state systemstate.SysState
	err := json.Unmarshal(msgIn, &state)
	if err == nil {
		fmt.Println("comm.decode--> UPD decoded")
		stateChan.SysState <- state
	}else{
		fmt.Println("comm.decode--> UPD Unmarshal error")
	}
}
	
//And now some coding of messages
func codeCMD(receiverIP string, newOrder elevator.Order) {
	msgOut, err := json.Marshal(newOrder)
	if err == nil {
		header := []byte("CMD")
		msgOut = append(header,msgOut...)
		mail := network.Mail{IP: receiverIP, Msg: msgOut}
		netChan.SendToOne <- mail
		//error handling?
	} 
}

func codeINF(orderTaken elevator.Order) {
	msgOut, err := json.Marshal(orderTaken)
	if err == nil {
		header := []byte("INF")
		msgOut = append(header,msgOut...)
		mail := network.Mail{Msg: msgOut}
		netChan.SendToAll <- mail
		//error handling?
	} 
}

func codeCPL(orderComplete elevator.Order) {
	msgOut, err := json.Marshal(orderComplete)
	if err == nil {
		header := []byte("CPL")
		msgOut = append(header,msgOut...)
		mail := network.Mail{Msg: msgOut}
		netChan.SendToAll <- mail
		//error handling?
	} 
}	

func codeNEW(newOrder elevator.Order) {
	msgOut, err := json.Marshal(newOrder)
	if err == nil {
		header := []byte("NEW")
		msgOut = append(header,msgOut...)
		mail := network.Mail{Msg: msgOut}
		netChan.SendToAll <- mail
		//error handling?
	} 
}

func codeOFR(receiverIP string, myOffer Offer) {
	msgOut, err := json.Marshal(myOffer)
	if err == nil {
		header := []byte("OFR")
		msgOut = append(header,msgOut...)
		mail := network.Mail{IP: receiverIP, Msg: msgOut}
		netChan.SendToOne <- mail
		//error handling?
	} 
}

func codeHLP() {
	header := []byte("HLP")
	mail := network.Mail{Msg: header}
	netChan.SendToAll <- mail
}

func codeUPD(receiverIP string, msg []byte) {
	header := []byte("UPD")
	msg = append(header, msg...)
	mail := network.Mail{IP: receiverIP, Msg: msg}
	netChan.SendToOne <- mail
}

func codeDTH(deadIP string) { // variable containing all the orders of the dead elevator
	msgOut,err := json.Marshal(deadIP)
	fmt.Println("Encoding--> length of DTH: ", len(msgOut))
	if err == nil {
		header := []byte("DTH")
		msgOut = append(header, msgOut...)
		mail := network.Mail{Msg: msgOut}
		netChan.SendToAll <- mail
	}
}













	
	
	
	
	
	
	
	
	
	
	
	
